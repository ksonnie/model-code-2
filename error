def process_bso_sheets_no_fit_analysis(file_path, bso_sheets, all_results):
    predictions_by_bso = {}
    
    for bso, sheet_name in bso_sheets.items():
        print(f"Processing BSO: {bso}, Sheet: {sheet_name}")
        
        # Read the sheet
        data = pd.read_excel(file_path, sheet_name=sheet_name)
        data['Date'] = pd.to_datetime(data['Date'], errors='coerce')
        data = data.dropna(subset=['Date'])
        
        last_date = data['Date'].max()
        future_dates = [last_date + pd.Timedelta(weeks=i) for i in range(1, 4)]
        
        for kpi_column in data.columns:
            if kpi_column in ['Date', 'BSO']:
                continue  # Skip non-KPI columns
            
            model_row = all_results[
                (all_results['BSO'] == bso) &
                (all_results['KPI Column'] == kpi_column)
            ]
            
            if model_row.empty:
                print(f"No model found for KPI: {kpi_column} in BSO: {bso}. Skipping.")
                continue
            
            best_model_name = model_row.iloc[0]['Best Model']
            print(f"Using Model: {best_model_name} for KPI: {kpi_column}, BSO: {bso}")
            
            X = data[['Date']].copy()
            X['DateNumeric'] = X['Date'].map(pd.Timestamp.toordinal)
            y = data[kpi_column].values
            
            try:
                # Train the model based on the best model specified
                if best_model_name == 'XGBoost Regressor':
                    model = XGBRegressor(random_state=42)
                elif best_model_name == 'Gradient Boosting':
                    model = GradientBoostingRegressor(random_state=42)
                elif best_model_name == 'Decision Tree':
                    model = DecisionTreeRegressor(random_state=42)
                elif best_model_name == 'Linear Regression':
                    model = LinearRegression()
                elif best_model_name == 'ElasticNet(alpha=0.1)':
                    model = ElasticNet(alpha=0.1, random_state=42)
                else:
                    print(f"Unknown Model: {best_model_name}. Skipping.")
                    continue
                
                # Train-test split
                X_train, X_test, y_train, y_test = train_test_split(
                    X[['DateNumeric']], y, test_size=0.2, random_state=42)
                
                model.fit(X_train, y_train)
                print(f"Model trained successfully for KPI: {kpi_column}, BSO: {bso}")
                
                # Prepare future features
                future_features = pd.DataFrame({'Date': future_dates})
                future_features['DateNumeric'] = future_features['Date'].map(pd.Timestamp.toordinal)
                
                future_predictions = model.predict(future_features[['DateNumeric']])
                print(f"Predictions: {future_predictions}")
                
                # Add predictions to the data
                new_rows = pd.DataFrame({'Date': future_dates, kpi_column: future_predictions})
                data = pd.concat([data, new_rows], ignore_index=True)
            except Exception as e:
                print(f"Error processing KPI: {kpi_column}, BSO: {bso}. Error: {e}")
        
        predictions_by_bso[bso] = data
        print(f"Completed processing for BSO: {bso}")
    
    return predictions_by_bso

# Consolidate results into a single DataFrame
def consolidate_results(predictions_by_bso):
    consolidated_data = []
    for bso, data in predictions_by_bso.items():
        data['BSO'] = bso  # Add a BSO column to identify the source
        consolidated_data.append(data)
    # Combine all data into a single DataFrame
    consolidated_df = pd.concat(consolidated_data, ignore_index=True)
    return consolidated_df

# Main section to process and display results
updated_bso_data = process_bso_sheets_no_fit_analysis(file_path, bso_sheets, all_results)

# Consolidate all results into a single DataFrame
consolidated_results = consolidate_results(updated_bso_data)
print(consolidated_results)
