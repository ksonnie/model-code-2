%pip install lightgbm
%pip install xgboost

import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression, ElasticNet
from sklearn.ensemble import GradientBoostingRegressor
from sklearn.tree import DecisionTreeRegressor
from xgboost import XGBRegressor

# File path and relevant BSO sheets
file_path = "/Volumes/navy-fip4-ya-dev/data_cleansing_dev/visualization_dev/All BSOs Dashboards.xlsx"
bso_sheets = {
    'USFFC': 'FFC Proj',
    'RESFOR': 'RESFOR Proj',
    'PACFLT': 'PACFLT Proj'
}

# Ensure model_mapping is passed in the right format (replace all_results creation here if already provided)
model_mapping = pd.DataFrame({
    'BSO': ['USFFC', 'USFFC', 'PACFLT'],  # Example values
    'KPI Column': ['KPI1', 'KPI2', 'KPI3'],  # Example values
    'Best Model': ['XGBoost Regressor', 'Linear Regression', 'Gradient Boosting']
})


# Function to replace NA with zeros
def replace_na_with_zeros(df):
    return df.fillna(0)


# Function to process each BSO sheet and make predictions
def process_bso_sheets_with_mapping(file_path, bso_sheets, model_mapping):
    predictions_by_bso = {}

    for _, row in model_mapping.iterrows():
        bso = row['BSO']
        kpi_column = row['KPI Column']
        best_model_name = row['Best Model']

        print(f"Processing BSO: {bso}, KPI: {kpi_column}, Model: {best_model_name}")

        # Identify the corresponding sheet for this BSO
        if bso not in bso_sheets:
            print(f"BSO {bso} not found in bso_sheets. Skipping.")
            continue

        sheet_name = bso_sheets[bso]

        # Read the relevant sheet
        data = pd.read_excel(file_path, sheet_name=sheet_name)
        data['Date'] = pd.to_datetime(data['Date'], errors='coerce')

        # Handle invalid dates
        if data['Date'].isnull().any():
            print(f"Invalid dates found in sheet: {sheet_name}. Replacing with earliest valid date.")
            earliest_date = data['Date'].dropna().min()
            data['Date'].fillna(earliest_date, inplace=True)

        last_date = data['Date'].max()
        print(f"Last Date in {sheet_name}: {last_date}")

        # Prepare future dates
        future_dates = [last_date + pd.Timedelta(weeks=i) for i in range(1, 4)]

        # Prepare data for modeling
        if kpi_column not in data.columns:
            print(f"KPI column {kpi_column} not found in sheet {sheet_name}. Skipping.")
            continue

        X = data[['Date']].copy()
        X['WeekOfYear'] = X['Date'].dt.isocalendar().week
        X['Year'] = X['Date'].dt.year
        X['DateNumeric'] = X['Date'].map(pd.Timestamp.toordinal)

        y = data[kpi_column].values
        if np.any(np.isnan(y)) or np.any(np.isinf(y)):
            print(f"Invalid values in KPI column {kpi_column} for BSO {bso}. Skipping...")
            continue

        # Train the model
        if best_model_name == 'XGBoost Regressor':
            model = XGBRegressor(random_state=42)
        elif best_model_name == 'Gradient Boosting':
            model = GradientBoostingRegressor(random_state=42)
        elif best_model_name == 'Decision Tree':
            model = DecisionTreeRegressor(random_state=42)
        elif best_model_name == 'Linear Regression':
            model = LinearRegression()
        elif best_model_name == 'ElasticNet(alpha=0.1)':
            model = ElasticNet(alpha=0.1, random_state=42)
        else:
            print(f"Unknown Model: {best_model_name} for KPI: {kpi_column}. Skipping.")
            continue

        try:
            X_train, X_test, y_train, y_test = train_test_split(
                X[['DateNumeric', 'WeekOfYear', 'Year']], y, test_size=0.2, random_state=42)
            model.fit(X_train, y_train)
            print(f"Model trained successfully for KPI: {kpi_column}, BSO: {bso}")

            # Prepare future features
            future_features = pd.DataFrame({'Date': future_dates})
            future_features['WeekOfYear'] = future_features['Date'].dt.isocalendar().week
            future_features['Year'] = future_features['Date'].dt.year
            future_features['DateNumeric'] = future_features['Date'].map(pd.Timestamp.toordinal)

            future_predictions = model.predict(future_features[['DateNumeric', 'WeekOfYear', 'Year']])
            print(f"Predictions for {kpi_column}: {future_predictions}")

            # Add predictions to the data
            new_rows = pd.DataFrame({'Date': future_dates, kpi_column: future_predictions})
            data = pd.concat([data, new_rows], ignore_index=True)

        except Exception as e:
            print(f"Error during model training or prediction for KPI: {kpi_column}, BSO: {bso}: {e}")
            continue

        predictions_by_bso[bso] = data
        print(f"Completed processing for BSO: {bso}, KPI: {kpi_column}")

    return predictions_by_bso


# Consolidate results into a single DataFrame
def consolidate_results(predictions_by_bso):
    consolidated_data = []
    for bso, data in predictions_by_bso.items():
        data['BSO'] = bso  # Add a BSO column to identify the source
        consolidated_data.append(data)
    # Combine all data into a single DataFrame
    consolidated_df = pd.concat(consolidated_data, ignore_index=True)
    return consolidated_df


# Main section to process all BSO sheets
updated_bso_data = process_bso_sheets_with_mapping(file_path, bso_sheets, model_mapping)

# Consolidate all results into a single DataFrame
consolidated_results = consolidate_results(updated_bso_data)

# Display the consolidated results
print(consolidated_results.head())
