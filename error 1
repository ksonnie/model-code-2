%pip install lightgbm
%pip install xgboost

import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression, ElasticNet
from sklearn.ensemble import GradientBoostingRegressor
from sklearn.tree import DecisionTreeRegressor
from xgboost import XGBRegressor

# File path and relevant BSO sheets
file_path = "/Volumes/navy-fip4-ya-dev/data_cleansing_dev/visualization_dev/All BSOs Dashboards.xlsx"
bso_sheets = {
    'USFFC': 'FFC Proj'
}

# Model Mapping Dictionary: BSO, KPI Column, and Best Model
model_mapping = {
    ('USFFC', 'NULOs that Remain High Priority'): 'XGBoost Regressor',
    ('USFFC', 'Billing exceeds Authorization (Abnormal Unfilled Customer Orders)'): 'XGBoost Regressor',
    ('USFFC', 'RBC Level- Total Negative Billed'): 'XGBoost Regressor',
    ('USFFC', 'RBC Level- Total Negative Authorizations'): 'Gradient Boosting'
}

# Function to replace NA with zeros
def replace_na_with_zeros(df):
    return df.fillna(0)

# Function to process BSO sheets and make predictions
def process_bso_sheets(file_path, bso_sheets, model_mapping):
    consolidated_data = []

    for (bso, kpi_column), best_model_name in model_mapping.items():
        print(f"Processing BSO: {bso}, KPI: {kpi_column}, Model: {best_model_name}")

        # Identify the corresponding sheet for this BSO
        if bso not in bso_sheets:
            print(f"BSO {bso} not found in bso_sheets. Skipping.")
            continue

        sheet_name = bso_sheets[bso]

        # Read the relevant sheet
        data = pd.read_excel(file_path, sheet_name=sheet_name)
        data['Date'] = pd.to_datetime(data['Date'], errors='coerce')
        data = replace_na_with_zeros(data)

        # Handle invalid dates
        if data['Date'].isnull().any():
            print(f"Invalid dates found in sheet: {sheet_name}. Skipping.")
            continue

        # Convert dates to numeric format
        data['DateNumeric'] = (data['Date'] - pd.Timestamp("1970-01-01")).dt.days

        last_date_numeric = data['DateNumeric'].max()
        print(f"Last numeric date in {sheet_name}: {last_date_numeric}")

        # Prepare data for modeling
        if kpi_column not in data.columns:
            print(f"KPI column {kpi_column} not found in sheet {sheet_name}. Skipping.")
            continue

        X = data[['DateNumeric']]
        y = data[kpi_column].values

        if np.any(np.isnan(y)) or np.any(np.isinf(y)):
            print(f"Invalid values in KPI column {kpi_column} for BSO {bso}. Skipping...")
            continue

        # Initialize the model
        if best_model_name == 'XGBoost Regressor':
            model = XGBRegressor(random_state=42)
        elif best_model_name == 'Gradient Boosting':
            model = GradientBoostingRegressor(random_state=42)
        elif best_model_name == 'Decision Tree':
            model = DecisionTreeRegressor(random_state=42)
        elif best_model_name == 'Linear Regression':
            model = LinearRegression()
        elif best_model_name == 'ElasticNet(alpha=0.1)':
            model = ElasticNet(alpha=0.1, random_state=42)
        else:
            print(f"Unknown Model: {best_model_name} for KPI: {kpi_column}. Skipping.")
            continue

        try:
            # Train the model
            X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
            model.fit(X_train, y_train)
            print(f"Model trained successfully for KPI: {kpi_column}, BSO: {bso}")

            # Iteratively predict for the next 3 weeks
            for _ in range(3):  # Predict for the next 3 weeks
                # Calculate next future date
                next_date_numeric = last_date_numeric + 7

                # Prepare data for the future date
                future_feature = pd.DataFrame({'DateNumeric': [next_date_numeric]})

                future_prediction = model.predict(future_feature)[0]
                print(f"Prediction for next date numeric {next_date_numeric}: {future_prediction}")

                # Add the prediction as part of historical data
                new_row = {'DateNumeric': next_date_numeric, kpi_column: future_prediction}
                data = pd.concat([data, pd.DataFrame([new_row])], ignore_index=True)

                # Update last_date_numeric for the next iteration
                last_date_numeric = next_date_numeric

            consolidated_data.append(data)

        except Exception as e:
            print(f"Error during model training or prediction for KPI: {kpi_column}, BSO: {bso}: {e}")
            continue

    # Combine all data into a single DataFrame
    consolidated_df = pd.concat(consolidated_data, ignore_index=True)
    return consolidated_df

# Process all BSO sheets and consolidate the results
consolidated_results = process_bso_sheets(file_path, bso_sheets, model_mapping)

# Display consolidated results
print(consolidated_results)
