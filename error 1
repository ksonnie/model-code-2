import pandas as pd
import numpy as np
from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import MinMaxScaler

# File path and sheet information
file_path = "/Volumes/navy-fip4-ya-dev/data_cleansing_dev/visualization_dev/All BSOs Dashboards.xlsx"
bso_sheets = {
    'USFFC': 'FFC Proj'
}

# Define KPI columns to process
kpi_columns = [
    "NULOs that Remain High Priority",
    "Billing exceeds Authorization (Abnormal Unfilled Customer Orders)",
    "RBC Level- Total Negative Billed",
    "RBC Level- Total Negative Authorizations",
]

# Function to preprocess and predict KPI values
def process_and_predict(sheet_name, kpi_columns):
    # Load the data
    data = pd.read_excel(file_path, sheet_name=sheet_name)
    data['Date'] = pd.to_datetime(data['Date'], errors='coerce')
    data = data.dropna(subset=['Date'])  # Drop rows with invalid dates

    # Convert Date to numeric format
    data['DateNumeric'] = data['Date'].map(pd.Timestamp.toordinal)

    # Prepare future dates for predictions (next 3 weeks)
    last_date = data['Date'].max()
    future_dates = [last_date + pd.Timedelta(weeks=i) for i in range(1, 4)]
    future_date_numeric = [pd.Timestamp(date).toordinal() for date in future_dates]

    # DataFrame to hold predictions
    future_predictions = {'Date': future_dates}

    for kpi_column in kpi_columns:
        if kpi_column in data.columns:
            print(f"Processing KPI: {kpi_column}")

            # Prepare data for model training
            X = data[['DateNumeric']]
            y = data[kpi_column]

            # Handle missing or zero-filled KPIs
            if y.isnull().sum() > 0 or y.sum() == 0:
                print(f"Skipping {kpi_column} due to missing or zero data.")
                continue

            # Scale the input data
            scaler = MinMaxScaler()
            X_scaled = scaler.fit_transform(X)

            # Train-test split
            X_train, X_test, y_train, y_test = train_test_split(X_scaled, y, test_size=0.2, random_state=42)

            # Initialize and train model
            model = RandomForestRegressor(random_state=42)
            model.fit(X_train, y_train)

            # Predict future KPI values
            future_X_scaled = scaler.transform(np.array(future_date_numeric).reshape(-1, 1))
            future_kpi_predictions = model.predict(future_X_scaled)

            # Store predictions
            future_predictions[kpi_column] = future_kpi_predictions

    # Convert predictions to DataFrame
    predictions_df = pd.DataFrame(future_predictions)
    return predictions_df

# Process each sheet and generate predictions
for bso, sheet_name in bso_sheets.items():
    print(f"Processing BSO: {bso}")
    predictions = process_and_predict(sheet_name, kpi_columns)
    print(predictions)
