import pandas as pd
import numpy as np
from sklearn.linear_model import LinearRegression
from sklearn.tree import DecisionTreeRegressor
from sklearn.ensemble import RandomForestRegressor
from xgboost import XGBRegressor
from sklearn.preprocessing import MinMaxScaler

# File path and sheet names
file_path = "/Volumes/navy-fip4-ya-dev/data_cleansing_dev/visualization_dev/All BSOs Dashboards.xlsx"

bso_sheets = {
    "USFFC": "FFC Proj",
    "RESFOR": "RESFOR Proj",
    "PACFLT": "PACFLT Proj"
}

# Prediction details based on R-squared table
prediction_details = [
    {"BSO": "USFFC", "KPI": "NULOs that Remain High Priority", "Model": "Random Forest"},
    {"BSO": "USFFC", "KPI": "Billing exceeds Authorization (Abnormal Unfilled Customer Orders)", "Model": "Decision Tree"},
    {"BSO": "USFFC", "KPI": "RBC Level- Total Negative Billed", "Model": "XGBoost"},
    {"BSO": "USFFC", "KPI": "RBC Level- Total Negative Authorizations", "Model": "Linear Regression"},
    # Add other KPIs and BSOs...
]

# Function to load data
def load_data(file_path, sheet_name):
    data = pd.read_excel(file_path, sheet_name=sheet_name)
    data['Date'] = pd.to_datetime(data['Date'], errors='coerce')
    data.dropna(subset=['Date'], inplace=True)
    return data

# Function to process predictions for each KPI and merge them into one row per date
def process_predictions(data, kpi_details):
    scaler = MinMaxScaler()
    last_date = data['Date'].max()
    future_dates = [last_date + pd.Timedelta(days=7 * i) for i in range(1, 4)]
    prediction_results = pd.DataFrame({'Date': future_dates})

    for detail in kpi_details:
        kpi = detail["KPI"]
        model_name = detail["Model"]

        if kpi not in data.columns:
            continue

        # Prepare historical data
        kpi_data = data[['Date', kpi]].dropna()
        if kpi_data.empty:
            continue

        kpi_data['DateNumeric'] = kpi_data['Date'].map(pd.Timestamp.toordinal)
        X = kpi_data[['DateNumeric']]
        y = kpi_data[kpi]
        X_scaled = scaler.fit_transform(X)

        # Initialize the model
        if model_name == "Linear Regression":
            model = LinearRegression()
        elif model_name == "Decision Tree":
            model = DecisionTreeRegressor(random_state=42)
        elif model_name == "Random Forest":
            model = RandomForestRegressor(random_state=42)
        elif model_name == "XGBoost":
            model = XGBRegressor(random_state=42)
        else:
            continue

        # Train the model
        model.fit(X_scaled, y)

        # Generate predictions
        predictions = []
        current_last_date = last_date
        for _ in range(3):
            next_date_numeric = scaler.transform([[current_last_date.toordinal()]])[0][0]
            prediction = model.predict([[next_date_numeric]])[0]
            predictions.append(prediction)

            # Update historical data
            new_row = {'Date': current_last_date, 'DateNumeric': current_last_date.toordinal(), kpi: prediction}
            kpi_data = pd.concat([kpi_data, pd.DataFrame([new_row])], ignore_index=True)
            X = kpi_data[['DateNumeric']]
            y = kpi_data[kpi]
            X_scaled = scaler.fit_transform(X)
            model.fit(X_scaled, y)

            # Increment the date
            current_last_date += pd.Timedelta(days=7)

        # Add predictions to the result
        prediction_results[kpi] = predictions

    return prediction_results

# Main execution
final_results = {}
for bso, sheet_name in bso_sheets.items():
    print(f"Processing BSO: {bso}")
    data = load_data(file_path, sheet_name)
    bso_details = [detail for detail in prediction_details if detail["BSO"] == bso]
    predictions = process_predictions(data, bso_details)
    predictions["BSO"] = bso
    final_results[bso] = predictions

# Combine results for all BSOs
combined_results = pd.concat(final_results.values(), ignore_index=True)
combined_results['Date'] = combined_results['Date'].dt.strftime('%m/%d/%Y')  # Format date as mm/dd/yyyy

# Display the final result
print(combined_results)
