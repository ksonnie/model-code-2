import pandas as pd
import matplotlib.pyplot as plt
from sklearn.linear_model import LinearRegression
from sklearn.metrics import r2_score

# File path and sheet names
file_path = "/Volumes/navy-fip4-ya-dev/data_cleansing_dev/visualization_dev/All BSOs Dashboards.xlsx"
bso_sheets = {
    "USFFC": "FFC Proj",
    "RESFOR": "RESFOR Proj",
    "PACFLT": "PACFLT Proj"
}

# Specify the KPI columns to plot
kpi_columns = [
    'NULOs that Remain High Priority',
    'Billing exceeds Authorization (Abnormal Unfilled Customer Orders)',
    'RBC Level- Total Negative Billed',
    'RBC Level- Total Negative Authorizations',
    'RON Level- Total Negative Reimbursable Collected',
    'Negative Liquidations - Travel (DTC: CS, CT, TO)',
    'Permanent Journal Vouchers',
    'OTA w/ Closed RON',
    'Negative Liquidations - Other',
    'OTA w/ Excluded Purchase Order (PO)',
    'Negative Liquidations - Foreign Currency',
    'Cost Transfer Allocation - "COE"',
    'ZMIL Negative Quantity / Positive Liquidation Amounts',
    'Cost Transfer Allocation - "L"',
    'Non-Labor Duplicates on SDN/ACRN/CLIN/SLIN',
    'Invalid LOA'
]

# Function to load and preprocess data for a BSO
def load_data(file_path, sheet_name):
    data = pd.read_excel(file_path, sheet_name=sheet_name)
    data['Date'] = pd.to_datetime(data['Date'], errors='coerce')
    data = data.dropna(subset=['Date'])  # Drop rows with invalid dates
    return data

# Function to calculate R-squared values and plot KPIs
def calculate_r2_and_plot_kpis(file_path, bso_sheets, kpi_columns):
    r2_table = []
    
    for bso, sheet_name in bso_sheets.items():
        # Load data for the current BSO
        data = load_data(file_path, sheet_name)
        
        # Check if KPI columns exist in the data
        existing_kpis = [col for col in kpi_columns if col in data.columns]
        if not existing_kpis:
            print(f"No specified KPI columns found for BSO: {bso}")
            continue
        
        # Plot the KPIs
        plt.figure(figsize=(12, 6))
        for kpi in existing_kpis:
            plt.plot(data['Date'], data[kpi], label=kpi)
            
            # Calculate R-squared for the KPI
            if len(data) > 1:
                data['DateNumeric'] = data['Date'].map(pd.Timestamp.toordinal)
                X = data[['DateNumeric']]
                y = data[kpi]
                
                model = LinearRegression()
                model.fit(X, y)
                y_pred = model.predict(X)
                
                r2 = r2_score(y, y_pred)
                r2_table.append({"BSO": bso, "KPI": kpi, "R-squared": round(r2, 4)})
        
        # Add titles and labels
        plt.title(f"KPIs Over Time for BSO: {bso}", fontsize=14)
        plt.xlabel("Date", fontsize=12)
        plt.ylabel("KPI Values", fontsize=12)
        plt.legend(loc="upper left")
        plt.grid(True)
        
        # Show the plot
        plt.tight_layout()
        plt.show()
    
    # Return the R-squared table
    return pd.DataFrame(r2_table)

# Call the function and display R-squared values
r2_results = calculate_r2_and_plot_kpis(file_path, bso_sheets, kpi_columns)
print(r2_results)
