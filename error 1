import pandas as pd
import numpy as np
from sklearn.ensemble import GradientBoostingRegressor
from sklearn.preprocessing import MinMaxScaler

# Load the Excel file
def load_data(sheet_name):
    data = pd.read_excel("/Volumes/navy-fip4-ya-dev/data_cleansing_dev/visualization_dev/All BSOs Dashboards.xlsx", sheet_name=sheet_name)
    data.fillna(0, inplace=True)  # Replace NaNs with 0
    return data

# Define the list of KPI columns
kpi_columns = [
    "NULOs that Remain High Priority",
    "Billing exceeds Authorization (Abnormal Unfilled Customer Orders)",
    "RBC Level- Total Negative Billed",
    "RBC Level- Total Negative Authorizations",
]

# Function to generate predictions and append them to the original data
def generate_predictions_with_kpi(data, kpi_columns):
    data['Date'] = pd.to_datetime(data['Date'])  # Ensure Date column is in datetime format
    data['DateNumeric'] = data['Date'].map(pd.Timestamp.toordinal)  # Convert Date to numeric ordinal format
    final_df = data[['Date']].copy()  # Start with just the date column

    for kpi_column in kpi_columns:
        if kpi_column in data.columns:
            print(f"Processing KPI: {kpi_column}")

            # Prepare data
            X = data[['DateNumeric']]
            y = data[kpi_column].values
            scaler = MinMaxScaler()
            X_scaled = scaler.fit_transform(X)

            # Initialize and train the model
            model = GradientBoostingRegressor(random_state=42)
            model.fit(X_scaled, y)

            # Start predictions
            future_predictions = []
            last_date = data['Date'].max()  # Identify the latest date
            future_dates = [last_date + pd.Timedelta(weeks=i) for i in range(1, 4)]  # Predict for 3 future weeks

            for future_date in future_dates:
                # Prepare data for prediction
                future_date_numeric = scaler.transform([[future_date.toordinal()]])[0][0]
                future_prediction = model.predict([[future_date_numeric]])[0]
                future_predictions.append(future_prediction)

                # Append to historical data
                X_scaled = np.append(X_scaled, [[future_date_numeric]], axis=0)
                y = np.append(y, future_prediction)
                model.fit(X_scaled, y)

            # Add the predictions to the final DataFrame
            prediction_df = pd.DataFrame({
                'Date': future_dates,
                kpi_column: future_predictions
            })

            # Merge the predictions with the original data for this KPI
            combined = pd.concat([data[['Date', kpi_column]], prediction_df], ignore_index=True)
            final_df = pd.merge(final_df, combined, on='Date', how='outer')

    # Sort by Date and ensure consistent data
    final_df['Date'] = pd.to_datetime(final_df['Date'])  # Ensure Date column remains in datetime format
    final_df.sort_values('Date', inplace=True)
    final_df.reset_index(drop=True, inplace=True)
    return final_df

# Example usage
sheet_name = "FFC Proj"
data = load_data(sheet_name)
final_data = generate_predictions_with_kpi(data, kpi_columns)

# Display the final DataFrame
print(final_data)
